
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path


from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ctypes
ctypes.windll.shcore.SetProcessDpiAwareness(True)
import tkinter as tk
from PIL import Image, ImageTk
import random
import requests
import datetime
import os
import csv
from datetime import datetime, timedelta

# vandaagname = datetime.date.today()
# morgenname = datetime.date.today() + datetime.timedelta(days=1)
# overmorgenname = datetime.date.today() + datetime.timedelta(days=2)
# oovermorgenname = datetime.date.today() + datetime.timedelta(days=3)
vandaagname = datetime.today().date()
morgenname = (datetime.today() + timedelta(days=1)).date()
overmorgenname = (datetime.today() + timedelta(days=2)).date()
oovermorgenname = (datetime.today() + timedelta(days=3)).date()

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\Sande\PycharmProjects\python\assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)



window = Tk()

window.geometry("937x1461")
window.configure(bg = "#E4E4E4")


list_stations = ["Arnhem", "Almere", "Amersfoort", "Almelo", "Alkmaar", "Apeldoorn", "Assen", "Amsterdam", "Boxtel", "Breda", "Dordrecht", "Delft", "Deventer", "Enschede", "Gouda", "Groningen", "Den Haag", "Hengelo", "Haarlem", "Helmond", "Hoorn", "Heerlen", "Den Bosch", "Hilversum", "Leiden", "Lelystad", "Leeuwarden", "Maastricht", "Nijmegen", "Oss", "Roermond", "Roosendaal", "Sittard", "Tilburg", "Utrecht", "Venlo", "Vlissingen", "Zaandam", "Zwolle", "Zutphen"]
station = random.choice(list_stations)
window.title(f"Stationszuil NS {station}")
#Een random station kiezen waar de stationszuil zich bevindt

# def get_weather_forecast(city):
#     API_KEY = "404f6ef44205711ecabaf88bcc8e7c83"
#     url = f"http://api.openweathermap.org/data/2.5/weather?q={city},nl&units=metric&lang=nl&appid={API_KEY}"
#
#     response = requests.get(url)
#
#     if response.status_code == 200:
#         weather_data = response.json()
#         temperature = weather_data['main']['temp']
#         description = weather_data['weather'][0]['description']
#         return temperature, description
#     else:
#         print("Fout:", response.status_code)
#
# city = station
# temperature, description = get_weather_forecast(city)
# rounded_temperature = round(temperature, 0)


def get_next_day_forecast(city, hoeveeldagen):
    API_KEY = "404f6ef44205711ecabaf88bcc8e7c83"  # Replace with your OpenWeatherMap API key

    # Get latitude and longitude for the city
    lat, lon = get_city_coordinates(city)

    if lat is None or lon is None:
        print(f"Could not find coordinates for {city}.")
        return None, None

    url = f"http://api.openweathermap.org/data/2.5/onecall?appid={API_KEY}&lat={lat}&lon={lon}&units=metric&lang=nl"

    response = requests.get(url)

    if response.status_code == 200:
        weather_data = response.json()
        # Get the forecast for the next day
        tomorrow = (datetime.now() + timedelta(days=hoeveeldagen)).strftime('%Y-%m-%d')
        for daily_data in weather_data['daily']:
            if datetime.utcfromtimestamp(daily_data['dt']).strftime('%Y-%m-%d') == tomorrow:
                temperature = daily_data['temp']['day']
                description = daily_data['weather'][0]['description']
                return temperature, description
        else:
            return None, None
    else:
        print("Fout:", response.status_code)
        return None, None


def get_city_coordinates(city):
    API_KEY = "404f6ef44205711ecabaf88bcc8e7c83"  # Replace with your OpenWeatherMap API key
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}"

    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        lat = data['coord']['lat']
        lon = data['coord']['lon']
        return lat, lon
    else:
        return None, None


# Example usage
city = station

temperature, description = get_next_day_forecast(city, 0)
temperature1, description1 = get_next_day_forecast(city, 1)
temperature2, description2 = get_next_day_forecast(city, 2)
temperature3, description3 = get_next_day_forecast(city, 3)

rounded_temperature = round(temperature, 0)
rounded_temperature1 = round(temperature1, 0)
rounded_temperature2 = round(temperature2, 0)
rounded_temperature3 = round(temperature3, 0)
def split_text(text, max_width):
    words = text.split()
    lines = []
    current_line = words[0]

    for word in words[1:]:
        test_line = current_line + " " + word
        if canvas.bbox(canvas.create_text(0, 0, anchor="nw", fill="#E4E4E4", text=test_line, font=font))[
            2] <= max_width:
            current_line = test_line
            #maak test text om te kijken hoe lang de text gaat worden. Maak hierna gebruik van de split functie
        else:
            lines.append(current_line)
            current_line = word

    lines.append(current_line)
    return lines


def add_image_to_canvas(canvas, image_path, x, y, width, height):
    # Load the image and resize it
    original_image = Image.open(image_path)
    resized_image = original_image.resize((width, height))

    # Create a PhotoImage object from the resized image
    tk_image = ImageTk.PhotoImage(resized_image)

    # Create an image item at the specified coordinates
    canvas.create_image(x, y, anchor=tk.NW, image=tk_image)
    return tk_image



canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 1461,
    width = 937,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    937.0,
    1461.0,
    fill="#E4E4E4",
    outline="")

canvas.create_rectangle(
    123.0,
    176.0,
    801.0,
    677.0,
    fill="#003082",
    outline="")

canvas.create_text(
    58.0,
    38.0,
    anchor="nw",
    text=f"Welkom op station NS {station}",
    fill="#0063D3",
    font=("Rubik Medium", 48 * -1)
)
canvas.create_text(
    61.0,
    96.0,
    anchor="nw",
    text="Hier vind je de weersverwachting en feedback",
    fill="#4D4D4D",
    font=("Rubik Medium", 24 * -1)
)


canvas.create_text(
    178.0,
    246.0,
    anchor="nw",
    text=f"{rounded_temperature:.0f}℃",
    fill="#FFFFFF",
    font=("Rubik SemiBold", 36 * -1)
)

canvas.create_text(
    178.0,
    209.0,
    anchor="nw",
    text=f"{station}, Nederlands",
    fill="#DFDFDF",
    font=("Rubik Regular", 20 * -1)
)

canvas.create_text(
    750.0,
    284.0,
    anchor="e",
    text=f"{description}",
    fill="#DFDFDF",
    font=("Rubik Regular", 32 * -1)
)

canvas.create_rectangle(
    178.0,
    317.0,
    751.0,
    324.0,
    fill="#FFC917",
    outline="")

canvas.create_rectangle(
    57.0,
    703.0,
    871.0,
    713.0,
    fill="#003082",
    outline="")

canvas.create_text(
    178.0,
    365.0,
    anchor="nw",
    text="Today",
    fill="#FFFFFF",
    font=("Rubik Regular", 20 * -1)
)

canvas.create_text(
    178.0,
    433.0,
    anchor="nw",
    text="Tomorrow",
    fill="#FFFFFF",
    font=("Rubik Regular", 20 * -1)
)

canvas.create_text(
    178.0,
    502.0,
    anchor="nw",
    text=(overmorgenname.strftime('%A')),
    fill="#FFFFFF",
    font=("Rubik Regular", 20 * -1)
)

canvas.create_text(
    178.0,
    583.0,
    anchor="nw",
    text=(oovermorgenname.strftime('%A')),
    fill="#FFFFFF",
    font=("Rubik Regular", 20 * -1)
)

canvas.create_text(
    669.0,
    357.0,
    anchor="nw",
    text=f"{rounded_temperature:.0f}℃",
    fill="#FFFFFF",
    font=("Rubik Regular", 24 * -1)
)

canvas.create_text(
    179.0,
    349.0,
    anchor="nw",
    text=(vandaagname.strftime('%d %B')),
    fill="#C3C3C3",
    font=("Rubik Regular", 14 * -1)
)

canvas.create_text(
    179.0,
    417.0,
    anchor="nw",
    text=(morgenname.strftime('%d %B')),
    fill="#C3C3C3",
    font=("Rubik Regular", 14 * -1)
)

canvas.create_text(
    179.0,
    486.0,
    anchor="nw",
    text=(overmorgenname.strftime('%d %B')),
    fill="#C3C3C3",
    font=("Rubik Regular", 14 * -1)
)

canvas.create_text(
    179.0,
    567.0,
    anchor="nw",
    text=(oovermorgenname.strftime('%d %B')),
    fill="#C3C3C3",
    font=("Rubik Regular", 14 * -1)
)

canvas.create_text(
    670.0,
    432.0,
    anchor="nw",
    text=f"{rounded_temperature1:.0f}℃",
    fill="#FFFFFF",
    font=("Rubik Regular", 24 * -1)
)

canvas.create_text(
    670.0,
    505.0,
    anchor="nw",
    text=f"{rounded_temperature2:.0f}℃",
    fill="#FFFFFF",
    font=("Rubik Regular", 24 * -1)
)

canvas.create_text(
    670.0,
    586.0,
    anchor="nw",
    text=f"{rounded_temperature3:.0f}℃",
    fill="#FFFFFF",
    font=("Rubik Regular", 24 * -1)
)

canvas.create_text(
    121.0,
    725.0,
    anchor="nw",
    text="Hier vind je de feedback van andere reizigers",
    fill="#0063D3",
    font=("Rubik Medium", 32 * -1)
)


#FEEDBACK VAN REIZIGERS


# Define file paths
csv_file_path = 'geaccepteerd.csv'

lines_to_read = 6  # Number of lines to read

if os.path.getsize(csv_file_path) == 0:
    print("Er zijn geen reviews om weer te geven.")
else:
    lines_to_read = 6  # Number of lines to read from the bottom

    input_list = []

    # Read the CSV file and reverse the content
    with open(csv_file_path, 'r') as csvfile:
        csv_reader = csv.reader(csvfile)
        lines = list(csv_reader)  # Read all lines

    # Reverse the lines
    reversed_lines = reversed(lines[-lines_to_read:])

    # Process the reversed lines
    for i, row in enumerate(reversed_lines):
        if len(row) == 8:
            input_list.append({
                'Naam': row[0],
                'Feedback': row[1],
                'Locatie': row[2],
                'Datum': row[3]
            })

    # Process the reversed input list
    for i, row in enumerate(input_list):
            if i == 0:
                canvas.create_rectangle(
                    72.0,
                    783.0,
                    432.0,
                    950.0,
                    fill="#003082",
                    outline="")

                canvas.create_text(
                    88.0,
                    798.0,
                    anchor="nw",
                    text=f"Naam: {row['Naam']}",
                    fill="#FFFFFF",
                    font=("Rubik Medium", 14 * -1)
                )

                canvas.create_rectangle(
                    88.0,
                    828.0,
                    415.0,
                    833.0,
                    fill="#FFC917",
                    outline="")
                # canvas.create_text(
                #     88.0,
                #     839.0,
                #     anchor="nw",
                #     text=f"{row['Feedback']}",
                #     fill="#FFFFFF",
                #     font=("Rubik", 12 * -1)
                # )
                # Feedback opsplitsen als het te lang word
                x = 88.0
                y = 839.0
                max_width = 330  # Maximum width for wrapping
                font = ("Rubik Medium", 11 * -1)

                # Split the text into lines and display
                lines = split_text(row['Feedback'], max_width)

                for line in lines:
                    canvas.create_text(x, y, anchor="nw", text=line, fill="#FFFFFF", font=font)
                    y += 20  # Adjust spacing between lines








                canvas.create_text(
                    301.0,
                    929.0,
                    anchor="nw",
                    text=f"{row['Datum']}",
                    fill="#C7C7C7",
                    font=("Rubik Medium", 11 * -1)
                )


            elif i == 1:
                canvas.create_rectangle(
                    494.0,
                    783.0,
                    855.0,
                    950.0,
                    fill="#003082",
                    outline="")

                canvas.create_text(
                    511.0,
                    800.0,
                    anchor="nw",
                    text=f"Naam: {row['Naam']}",
                    fill="#FFFFFF",
                    font=("Rubik Medium", 14 * -1)
                )

                canvas.create_rectangle(
                    511.0,
                    829.0,
                    837.0,
                    835.0,
                    fill="#FFC917",
                    outline="")

                # canvas.create_text(
                #     511.0,
                #     840.0,
                #     anchor="nw",
                #     text=f"{row['Feedback']}",
                #     fill="#FFFFFF",
                #     font=("Rubik Medium", 12 * -1)
                # )
                x = 511.0
                y = 840.0
                max_width = 330  # Maximum width for wrapping
                font = ("Rubik Medium", 11 * -1)

                # Split the text into lines and display
                lines = split_text(row['Feedback'], max_width)

                for line in lines:
                    canvas.create_text(x, y, anchor="nw", text=line, fill="#FFFFFF", font=font)
                    y += 20  # Adjust spacing between lines

                canvas.create_text(
                    725.0,
                    928.0,
                    anchor="nw",
                    text=f"{row['Datum']}",
                    fill="#C7C7C7",
                    font=("Rubik Medium", 11 * -1)
                )
            elif i == 2:
                canvas.create_rectangle(
                    72.0,
                    983.0,
                    432.0,
                    1150.0,
                    fill="#003082",
                    outline="")

                canvas.create_text(
                    88.0,
                    998.0,
                    anchor="nw",
                    text=f"{row['Naam']}",
                    fill="#FFFFFF",
                    font=("Rubik Medium", 14 * -1)
                )

                canvas.create_rectangle(
                    88.0,
                    1028.0,
                    415.0,
                    1033.0,
                    fill="#FFC917",
                    outline="")

                # canvas.create_text(
                #     88.0,
                #     1039.0,
                #     anchor="nw",
                #     text=f"{row['Feedback']}",
                #     fill="#FFFFFF",
                #     font=("Rubik Medium", 12 * -1)
                # )
                x = 88.0
                y = 1039.0
                max_width = 330  # Maximum width for wrapping
                font = ("Rubik Medium", 11 * -1)

                # Split the text into lines and display
                lines = split_text(row['Feedback'], max_width)

                for line in lines:
                    canvas.create_text(x, y, anchor="nw", text=line, fill="#FFFFFF", font=font)
                    y += 20  # Adjust spacing between lines

                canvas.create_text(
                    301.0,
                    1128.0,
                    anchor="nw",
                    text=f"{row['Datum']}",
                    fill="#C7C7C7",
                    font=("Rubik Medium", 11 * -1)
                )

            elif i == 3:
                canvas.create_rectangle(
                    494.0,
                    983.0,
                    855.0,
                    1150.0,
                    fill="#003082",
                    outline="")

                canvas.create_text(
                    511.0,
                    1000.0,
                    anchor="nw",
                    text=f"{row['Naam']}",
                    fill="#FFFFFF",
                    font=("Rubik Medium", 14 * -1)
                )

                canvas.create_rectangle(
                    511.0,
                    1029.0,
                    837.0,
                    1035.0,
                    fill="#FFC917",
                    outline="")

                # canvas.create_text(
                #     511.0,
                #     1040.0,
                #     anchor="nw",
                #     text=f"{row['Feedback']}",
                #     fill="#FFFFFF",
                #     font=("Rubik Medium", 12 * -1)
                # )
                x = 511.0
                y = 1040.0
                max_width = 330  # Maximum width for wrapping
                font = ("Rubik Medium", 11 * -1)

                # Split the text into lines and display
                lines = split_text(row['Feedback'], max_width)

                for line in lines:
                    canvas.create_text(x, y, anchor="nw", text=line, fill="#FFFFFF", font=font)
                    y += 20  # Adjust spacing between lines

                canvas.create_text(
                    725.0,
                    1130.0,
                    anchor="nw",
                    text=f"{row['Datum']}",
                    fill="#C7C7C7",
                    font=("Rubik Medium", 11 * -1)
                )

            elif i == 4:
                canvas.create_rectangle(
                    72.0,
                    1183.0,
                    432.0,
                    1349.0,
                    fill="#003082",
                    outline="")

                canvas.create_text(
                    88.0,
                    1198.0,
                    anchor="nw",
                    text=f"{row['Naam']}",
                    fill="#FFFFFF",
                    font=("Rubik Medium", 14 * -1)
                )

                canvas.create_rectangle(
                    88.0,
                    1228.0,
                    415.0,
                    1233.0,
                    fill="#FFC917",
                    outline="")

                    # Feedback opsplitsen als het te lang word
                x = 88.0
                y = 1239.0
                max_width = 330  # Maximum width for wrapping
                font = ("Rubik Medium", 11 * -1)

                # Split the text into lines and display
                lines = split_text(row['Feedback'], max_width)

                for line in lines:
                    canvas.create_text(x, y, anchor="nw", text=line, fill="#FFFFFF", font=font)
                    y += 20  # Adjust spacing between lines

                canvas.create_text(
                    301.0,
                    1327.0,
                    anchor="nw",
                    text=f"{row['Datum']}",
                    fill="#C7C7C7",
                    font=("Rubik Medium", 11 * -1)
                )
            elif i == 5:
                canvas.create_rectangle(
                    494.0,
                    1183.0,
                    855.0,
                    1349.0,
                    fill="#003082",
                    outline="")

                canvas.create_text(
                    511.0,
                    1200.0,
                    anchor="nw",
                    text=f"{row['Naam']}",
                    fill="#FFFFFF",
                    font=("Rubik Medium", 14 * -1)
                )

                canvas.create_rectangle(
                    511.0,
                    1229.0,
                    837.0,
                    1235.0,
                    fill="#FFC917",
                    outline="")

                # canvas.create_text(
                #     511.0,
                #     1240.0,
                #     anchor="nw",
                #     text=f"{row['Feedback']}",
                #     fill="#FFFFFF",
                #     font=("Rubik Medium", 12 * -1)
                # )
                x = 511.0
                y = 1240.0
                max_width = 330  # Maximum width for wrapping
                font = ("Rubik Medium", 11 * -1)

                # Split the text into lines and display
                lines = split_text(row['Feedback'], max_width)

                for line in lines:
                    canvas.create_text(x, y, anchor="nw", text=line, fill="#FFFFFF", font=font)
                    y += 20  # Adjust spacing between lines

                canvas.create_text(
                    725.0,
                    1327.0,
                    anchor="nw",
                    text=f"{row['Datum']}",
                    fill="#C7C7C7",
                    font=("Rubik Medium", 11 * -1)
                )
            else:
                print("Er is iets misgegaan, probeer het later opnieuw.")


#fotos weer

zon = "assets/01d2x.png"
bewolktmetzon = "assets/02d@2x.png"
bewolkt = "assets/03d@2x.png"
heelbewolkt = "assets/04d@2x.png"
bewolktmetregen = "assets/09d@2x.png"
Regenboog = "assets/10d@2x.png"
Storm = "assets/11d@2x.png"
Sneeuw = "assets/13d@2x.png"
Mist = "assets/50d@2x.png"




Vandaagbig = add_image_to_canvas(canvas, bewolktmetzon, x=673, y=185, width=100, height=100)
Vandaag = add_image_to_canvas(canvas, zon, x=590, y=332, width=75, height=75)
morgen= add_image_to_canvas(canvas, Mist, x=590, y=407, width=75, height=75)
overmorgen= add_image_to_canvas(canvas, bewolkt, x=590, y=477, width=75, height=75)
overovermorgen= add_image_to_canvas(canvas, bewolktmetzon, x=590, y=558, width=75, height=75)










image_path = "assets/Nederlandse_Spoorwegen_logo.svg.png"
image = add_image_to_canvas(canvas, image_path, x=850, y=17, width=50, height=20)
image_path1 = "assets/hogeschool-utrecht-logo-png-transparent.png"
image1 = add_image_to_canvas(canvas, image_path1, x=350, y=1390, width=210, height=49)

window.resizable(False, False)
window.mainloop()
